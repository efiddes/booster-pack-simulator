{"version":3,"sources":["components/card.module.css","images/mtg-back.jpg","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","image","number","className","style","card","src","back","alt","App","useState","booster","setBooster","useEffect","getBooster","console","log","a","async","set","rarity","Math","random","fetch","rare","uncommon","common","basic","json","rares","uncommons","commons","basics","cards","map","key","imageUrl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,kBCDpDD,EAAOC,QAAU,IAA0B,sC,iOCa5BC,EARF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACxB,OACI,yBAAKC,UAAWC,IAAMC,MAClB,yBAAKF,UAAWC,IAAMH,MAAOK,IAAKL,GAAgBM,IAAMC,IAAKR,EAAME,OAAQA,MCyDxEO,MA5Df,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENC,EAFM,KAEGC,EAFH,KAIbC,qBAAU,WACRC,IACAC,QAAQC,IAAI,yBACX,IAEH,IAAMF,EAAa,4CAAAG,EAAAC,OAAA,uDAIbC,EAAM,MACNC,EAASC,KAAKC,SAAW,KAAQ,OAAS,SAL7B,WAAAL,EAAA,MAQEM,MAAM,iDAAD,OAAkDJ,EAAlD,mBAAgEC,EAAhE,+CARP,cAQXI,EARW,OASjBT,QAAQC,IAAR,wDAA6DG,EAA7D,mBAA2EC,EAA3E,8CATiB,WAAAH,EAAA,MAUMM,MAAM,iDAAD,OAAkDJ,EAAlD,+DAVX,cAUXM,EAVW,mBAAAR,EAAA,MAWIM,MAAM,iDAAD,OAAkDJ,EAAlD,8DAXT,eAWXO,EAXW,mBAAAT,EAAA,MAYGM,MAAM,iDAAD,OAAkDJ,EAAlD,0DAZR,eAYXQ,EAZW,mBAAAV,EAAA,MAcGO,EAAKI,QAdR,eAcXC,EAdW,mBAAAZ,EAAA,MAeOQ,EAASG,QAfhB,eAeXE,EAfW,mBAAAb,EAAA,MAgBKS,EAAOE,QAhBZ,eAgBXG,EAhBW,mBAAAd,EAAA,MAiBIU,EAAMC,QAjBV,QAiBXI,EAjBW,OAmBjBjB,QAAQC,IAAIa,EAAMI,OAClBlB,QAAQC,IAAIc,EAAUG,OACtBlB,QAAQC,IAAIe,EAAQE,OACpBlB,QAAQC,IAAIgB,EAAOC,OAGnBrB,EAAW,GAAD,mBAAKiB,EAAMI,OAAX,YAAqBH,EAAUG,OAA/B,YAAyCF,EAAQE,OAAjD,YAA2DD,EAAOC,SAzB3D,uCA8BnB,OACE,yBAAK9B,UAAU,OACb,gCACE,uDAEF,yBAAKA,UAAU,WAAf,mBAGCQ,EAAQuB,KAAI,SAAA7B,GAAI,OACf,kBAAC,EAAD,CACE8B,IAAK9B,EAAKH,OACVF,KAAMK,EAAKL,KACXC,MAAOI,EAAK+B,SACZlC,OAAQG,EAAKH,YAGjB,qDChDcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ad5c854.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__9A73e\",\"image\":\"card_image__1JpW0\"};","module.exports = __webpack_public_path__ + \"static/media/mtg-back.2ca7bd5a.jpg\";","import React from 'react';\r\n\r\nimport style from './card.module.css';\r\nimport back from '../images/mtg-back.jpg';\r\n\r\nconst Card = ({name, image, number}) => {\r\n    return (\r\n        <div className={style.card}>\r\n            <img className={style.image} src={image ? image : back} alt={name} number={number}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport Card from './components/Card';\n\nfunction App() {\n\n  const [booster, setBooster] = useState([]);\n\n  useEffect(() => {\n    getBooster();\n    console.log('Effect has been run');\n  }, []);\n\n  const getBooster = async () => {\n    //booster api call is inadequate \n    //const response = await fetch('https://api.magicthegathering.io/v1/sets/war/booster');\n\n    let set = 'war';\n    let rarity = Math.random() > 0.125 ? 'rare' : 'mythic';\n\n\n    const rare = await fetch(`https://api.magicthegathering.io/v1/cards?set=${set}&rarity=${rarity}&pageSize=1&random=true&contains=imageUrl`);\n    console.log(`https://api.magicthegathering.io/v1/cards?set=${set}&rarity=${rarity}&pageSize=1&random=true&contains=imageUrl`);\n    const uncommon = await fetch(`https://api.magicthegathering.io/v1/cards?set=${set}&rarity=uncommon&pageSize=3&random=true&contains=imageUrl`);\n    const common = await fetch(`https://api.magicthegathering.io/v1/cards?set=${set}&rarity=common&pageSize=10&random=true&contains=imageUrl`);\n    const basic = await fetch(`https://api.magicthegathering.io/v1/cards?set=${set}&type=basic&pageSize=1&random=true&contains=imageUrl`);\n    \n    const rares = await rare.json();\n    const uncommons = await uncommon.json();\n    const commons = await common.json();\n    const basics = await basic.json();\n\n    console.log(rares.cards);\n    console.log(uncommons.cards);\n    console.log(commons.cards);\n    console.log(basics.cards);\n\n    //setBooster(rares.cards);\n    setBooster([...rares.cards, ...uncommons.cards, ...commons.cards, ...basics.cards]);\n    //setBooster(commons.cards);\n    //setBooster(basics.cards);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2>Booster Pack Simulator</h2>\n      </header>\n      <div className=\"filters\">\n        Filter Options:\n      </div>\n      {booster.map(card => (\n        <Card \n          key={card.number} \n          name={card.name} \n          image={card.imageUrl}\n          number={card.number}\n        />\n      ))}\n      <footer>By Ethan Fiddes</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}